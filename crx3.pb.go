// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crx3.proto

package crx3

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CrxFileHeader struct {
	// PSS signature with RSA public key. The public key is formatted as a
	// X.509 SubjectPublicKeyInfo block, as in CRXâ‚‚. In the common case of a
	// developer key proof, the first 128 bits of the SHA-256 hash of the
	// public key must equal the crx_id.
	Sha256WithRsa []*AsymmetricKeyProof `protobuf:"bytes,2,rep,name=sha256_with_rsa,json=sha256WithRsa" json:"sha256_with_rsa,omitempty"`
	// ECDSA signature, using the NIST P-256 curve. Public key appears in
	// named-curve format.
	// The pinned algorithm will be this, at least on 2017-01-01.
	Sha256WithEcdsa []*AsymmetricKeyProof `protobuf:"bytes,3,rep,name=sha256_with_ecdsa,json=sha256WithEcdsa" json:"sha256_with_ecdsa,omitempty"`
	// The binary form of a SignedData message. We do not use a nested
	// SignedData message, as handlers of this message must verify the proofs
	// on exactly these bytes, so it is convenient to parse in two steps.
	//
	// All proofs in this CrxFile message are on the value
	// "CRX3 SignedData\x00" + signed_header_size + signed_header_data +
	// archive, where "\x00" indicates an octet with value 0, "CRX3 SignedData"
	// is encoded using UTF-8, signed_header_size is the size in octets of the
	// contents of this field and is encoded using 4 octets in little-endian
	// order, signed_header_data is exactly the content of this field, and
	// archive is the remaining contents of the file following the header.
	SignedHeaderData     []byte   `protobuf:"bytes,10000,opt,name=signed_header_data,json=signedHeaderData" json:"signed_header_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrxFileHeader) Reset()         { *m = CrxFileHeader{} }
func (m *CrxFileHeader) String() string { return proto.CompactTextString(m) }
func (*CrxFileHeader) ProtoMessage()    {}
func (*CrxFileHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e1486cb9731e16, []int{0}
}

func (m *CrxFileHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrxFileHeader.Unmarshal(m, b)
}
func (m *CrxFileHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrxFileHeader.Marshal(b, m, deterministic)
}
func (m *CrxFileHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrxFileHeader.Merge(m, src)
}
func (m *CrxFileHeader) XXX_Size() int {
	return xxx_messageInfo_CrxFileHeader.Size(m)
}
func (m *CrxFileHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_CrxFileHeader.DiscardUnknown(m)
}

var xxx_messageInfo_CrxFileHeader proto.InternalMessageInfo

func (m *CrxFileHeader) GetSha256WithRsa() []*AsymmetricKeyProof {
	if m != nil {
		return m.Sha256WithRsa
	}
	return nil
}

func (m *CrxFileHeader) GetSha256WithEcdsa() []*AsymmetricKeyProof {
	if m != nil {
		return m.Sha256WithEcdsa
	}
	return nil
}

func (m *CrxFileHeader) GetSignedHeaderData() []byte {
	if m != nil {
		return m.SignedHeaderData
	}
	return nil
}

type AsymmetricKeyProof struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AsymmetricKeyProof) Reset()         { *m = AsymmetricKeyProof{} }
func (m *AsymmetricKeyProof) String() string { return proto.CompactTextString(m) }
func (*AsymmetricKeyProof) ProtoMessage()    {}
func (*AsymmetricKeyProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e1486cb9731e16, []int{1}
}

func (m *AsymmetricKeyProof) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AsymmetricKeyProof.Unmarshal(m, b)
}
func (m *AsymmetricKeyProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AsymmetricKeyProof.Marshal(b, m, deterministic)
}
func (m *AsymmetricKeyProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsymmetricKeyProof.Merge(m, src)
}
func (m *AsymmetricKeyProof) XXX_Size() int {
	return xxx_messageInfo_AsymmetricKeyProof.Size(m)
}
func (m *AsymmetricKeyProof) XXX_DiscardUnknown() {
	xxx_messageInfo_AsymmetricKeyProof.DiscardUnknown(m)
}

var xxx_messageInfo_AsymmetricKeyProof proto.InternalMessageInfo

func (m *AsymmetricKeyProof) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *AsymmetricKeyProof) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SignedData struct {
	// This is simple binary, not UTF-8 encoded mpdecimal; i.e. it is exactly
	// 16 bytes long.
	CrxId                []byte   `protobuf:"bytes,1,opt,name=crx_id,json=crxId" json:"crx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedData) Reset()         { *m = SignedData{} }
func (m *SignedData) String() string { return proto.CompactTextString(m) }
func (*SignedData) ProtoMessage()    {}
func (*SignedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_02e1486cb9731e16, []int{2}
}

func (m *SignedData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedData.Unmarshal(m, b)
}
func (m *SignedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedData.Marshal(b, m, deterministic)
}
func (m *SignedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedData.Merge(m, src)
}
func (m *SignedData) XXX_Size() int {
	return xxx_messageInfo_SignedData.Size(m)
}
func (m *SignedData) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedData.DiscardUnknown(m)
}

var xxx_messageInfo_SignedData proto.InternalMessageInfo

func (m *SignedData) GetCrxId() []byte {
	if m != nil {
		return m.CrxId
	}
	return nil
}

func init() {
	proto.RegisterType((*CrxFileHeader)(nil), "crx3.CrxFileHeader")
	proto.RegisterType((*AsymmetricKeyProof)(nil), "crx3.AsymmetricKeyProof")
	proto.RegisterType((*SignedData)(nil), "crx3.SignedData")
}

func init() { proto.RegisterFile("crx3.proto", fileDescriptor_02e1486cb9731e16) }

var fileDescriptor_02e1486cb9731e16 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8e, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x69, 0xa2, 0x42, 0x47, 0x4b, 0x75, 0x40, 0xd8, 0x83, 0x42, 0x89, 0x97, 0x5e, 0xec,
	0xa1, 0xa2, 0x67, 0xff, 0x54, 0xa9, 0x14, 0x44, 0xe3, 0xc1, 0xe3, 0x32, 0xee, 0x8e, 0x66, 0xb1,
	0x35, 0x65, 0x76, 0x8b, 0xc9, 0x5b, 0xf8, 0x54, 0x3e, 0x97, 0x24, 0x2b, 0x2a, 0x78, 0xf0, 0x36,
	0xcc, 0xc7, 0xef, 0xf7, 0x7d, 0x00, 0x46, 0xaa, 0xa3, 0xd1, 0x52, 0xca, 0x50, 0xe2, 0x5a, 0x73,
	0x67, 0x1f, 0x1d, 0xe8, 0x5d, 0x48, 0x75, 0xe5, 0xe6, 0x3c, 0x65, 0xb2, 0x2c, 0x78, 0x0a, 0x7d,
	0x5f, 0xd0, 0xf8, 0xf8, 0x44, 0xbf, 0xb9, 0x50, 0x68, 0xf1, 0xa4, 0x92, 0x41, 0x3a, 0xdc, 0x1c,
	0xab, 0x51, 0x4b, 0x9f, 0xf9, 0x7a, 0xb1, 0xe0, 0x20, 0xce, 0xcc, 0xb8, 0xbe, 0x95, 0xb2, 0x7c,
	0xca, 0x7b, 0x11, 0x78, 0x70, 0xa1, 0xc8, 0x3d, 0xe1, 0x04, 0x76, 0x7e, 0x1b, 0xd8, 0x58, 0x4f,
	0x2a, 0xfd, 0xc7, 0xd1, 0xff, 0x71, 0x5c, 0x36, 0x00, 0x1e, 0x02, 0x7a, 0xf7, 0xfc, 0xca, 0x56,
	0x17, 0xed, 0x30, 0x6d, 0x29, 0x90, 0x7a, 0xbf, 0x19, 0x74, 0x86, 0x5b, 0xf9, 0x76, 0x8c, 0xe2,
	0xe4, 0x09, 0x05, 0xca, 0xee, 0x00, 0xff, 0x5a, 0x71, 0x1f, 0x60, 0xb9, 0x7a, 0x9c, 0x3b, 0xa3,
	0x5f, 0xb8, 0x56, 0x9d, 0x96, 0xed, 0xc6, 0xcf, 0x8c, 0x6b, 0xdc, 0x83, 0x6e, 0x23, 0xa2, 0xb0,
	0x12, 0x56, 0x49, 0x4c, 0xbf, 0x1f, 0xd9, 0x01, 0xc0, 0x7d, 0x5b, 0xd3, 0x14, 0xe0, 0x2e, 0x6c,
	0x18, 0xa9, 0xb4, 0xb3, 0x5f, 0x9a, 0x75, 0x23, 0xd5, 0xb5, 0x3d, 0x4f, 0xa6, 0xe9, 0x67, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x31, 0xb2, 0x10, 0x85, 0x57, 0x01, 0x00, 0x00,
}
